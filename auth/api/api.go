//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// NOTE: auto generated by midc, DON'T edit
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
package api

import (
	"net/http"
	"net/url"

	"github.com/gopherd/doge/query"
)

var (
	_ = query.ParseURL
	_ = http.MethodGet
	_ url.Values
)

const (
	Unknown = 0
	Male    = 1
	Female  = 2
)

// Authorize
type AuthorizeRequest struct {
	Channel int    `json:"channel"`
	Type    string `json:"type"`
	Account string `json:"account"`
	Secret  string `json:"secret"`
	Device  string `json:"device"`
	Os      string `json:"os"`
	Model   string `json:"model"`
	Source  string `json:"source"`
	Name    string `json:"name"`
	Avatar  string `json:"avatar"`
	Gender  int    `json:"gender"`
}

func (argv *AuthorizeRequest) form(r *http.Request) url.Values {
	const defaultMaxMemory = 32 << 20 // 32 MB
	if r.Form == nil {
		r.ParseMultipartForm(defaultMaxMemory)
	}
	return r.Form
}

func (argv *AuthorizeRequest) Parse(r *http.Request) error {
	var err error
	if argv.Channel, err = query.RequiredInt(argv.form(r), "channel"); err != nil {
		return err
	}
	if argv.Type, err = query.RequiredString(argv.form(r), "type"); err != nil {
		return err
	}
	if argv.Account, err = query.RequiredString(argv.form(r), "account"); err != nil {
		return err
	}
	argv.Secret = query.String(argv.form(r), "secret", "")
	argv.Device = query.String(argv.form(r), "device", "")
	argv.Os = query.String(argv.form(r), "os", "")
	argv.Model = query.String(argv.form(r), "model", "")
	argv.Source = query.String(argv.form(r), "source", "")
	argv.Name = query.String(argv.form(r), "name", "")
	argv.Avatar = query.String(argv.form(r), "avatar", "")
	if argv.Gender, err = query.Int(argv.form(r), "gender", 0); err != nil {
		return err
	}
	return err
}

type AuthorizeResponse struct {
	Channel               int               `json:"channel"`
	AccessToken           string            `json:"access_token"`
	AccessTokenExpiredAt  int64             `json:"access_token_expired_at"`
	RefreshToken          string            `json:"refresh_token"`
	RefreshTokenExpiredAt int64             `json:"refresh_token_expired_at"`
	OpenId                string            `json:"open_id"`
	Providers             map[string]string `json:"providers"`
}

// Link account
type LinkRequest struct {
	Type    string `json:"type"`
	Token   string `json:"token"`
	Account string `json:"account"`
	Secret  string `json:"secret"`
	Name    string `json:"name"`
	Avatar  string `json:"avatar"`
	Gender  int    `json:"gender"`
}

func (argv *LinkRequest) form(r *http.Request) url.Values {
	const defaultMaxMemory = 32 << 20 // 32 MB
	if r.Form == nil {
		r.ParseMultipartForm(defaultMaxMemory)
	}
	return r.Form
}

func (argv *LinkRequest) Parse(r *http.Request) error {
	var err error
	if argv.Type, err = query.RequiredString(argv.form(r), "type"); err != nil {
		return err
	}
	if argv.Token, err = query.RequiredString(argv.form(r), "token"); err != nil {
		return err
	}
	if argv.Account, err = query.RequiredString(argv.form(r), "account"); err != nil {
		return err
	}
	argv.Secret = query.String(argv.form(r), "secret", "")
	argv.Name = query.String(argv.form(r), "name", "")
	argv.Avatar = query.String(argv.form(r), "avatar", "")
	if argv.Gender, err = query.Int(argv.form(r), "gender", 0); err != nil {
		return err
	}
	return err
}

type LinkResponse struct {
	OpenId string `json:"open_id"`
}

// SMS code
type SmsCodeRequest struct {
	Channel int    `json:"channel"`
	Mobile  string `json:"mobile"`
}

func (argv *SmsCodeRequest) form(r *http.Request) url.Values {
	const defaultMaxMemory = 32 << 20 // 32 MB
	if r.Form == nil {
		r.ParseMultipartForm(defaultMaxMemory)
	}
	return r.Form
}

func (argv *SmsCodeRequest) Parse(r *http.Request) error {
	var err error
	if argv.Channel, err = query.RequiredInt(argv.form(r), "channel"); err != nil {
		return err
	}
	if argv.Mobile, err = query.RequiredString(argv.form(r), "mobile"); err != nil {
		return err
	}
	return err
}

type SmsCodeResponse struct {
	Seconds int `json:"seconds"`
}

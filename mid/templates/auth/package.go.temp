//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// NOTE: auto generated by midc, DON'T edit
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
package api

import (
	"net/http"
	"net/url"

	"github.com/gopherd/doge/query"
)

var (
	_ = query.ParseURL
	_ = http.MethodGet
	_ url.Values
)


{{define "T_const"}}
{{range $decl := .}}
{{$decl.Doc}}const (
	{{range $field := $decl.Consts}}{{$field.Name}} = {{$field.ValueString}}{{$field.Comment}}
	{{end}}
)
{{end}}
{{end}}

{{define "T_enum"}}
{{$type := .Name}}
type {{$type}} int
{{.Doc}}const (
	{{range $field := .Fields}}{{$type}}_{{$field.Name}} {{$type}} = {{$field.Value}}{{$field.Comment}}
	{{end}}
)
{{end}}

{{define "T_service"}}
{{$type := .Name}}
{{.Doc}}type {{$type}} interface {
	{{range $ext := .Extends}}{{$ext.Name}}
	{{end}}
	{{range $field := .Fields}}
	{{- $field.Name | upperCamel}} {{context.BuildType $field.Type}} {{$field.Comment}}
	{{end}}
}
{{end}}

{{define "T_struct"}}
{{$type := .Name}}
{{.Doc}}type {{$type}} struct {
	{{range $ext := .Extends}}{{$ext.Name}}
	{{end}}
	{{range $field := .Fields}}
	{{- $jsonTag := newString}}
	{{- $jsonTag.Set (.GetTag "json")}}
	{{- if eq "" $jsonTag.Get}}
	   {{- $jsonTag.Set (underScore $field.Name)}}
	{{- end}}
	{{- $field.Name | upperCamel}} {{context.BuildType $field.Type}} `json:"{{$jsonTag.Get}}"`{{$field.Comment}}
	{{end}}
}
{{end}}

{{define "T_protocol"}}
{{$bean := .}}
{{$type := $bean.Name}}
{{.Doc}}type {{$type}} struct {
	{{range $ext := .Extends}}{{$ext.Name}}
	{{end}}
	{{range $field := $bean.Fields}}
	{{- $jsonTag := newString}}
	{{- $jsonTag.Set (.GetTag "json")}}
	{{- if eq "" $jsonTag.Get}}
	   {{- $jsonTag.Set (underScore $field.Name)}}
	{{- end}}
	{{- $field.Name | upperCamel}} {{context.BuildType $field.Type}} `json:"{{$jsonTag.Get}}"`{{$field.Comment}}
	{{end}}
}

{{if hasSuffix "Request" $type}}
{{$cmd := trimSuffix "Request" $type}}
func (argv *{{$type}}) form(r *http.Request) url.Values {
	const defaultMaxMemory = 32 << 20 // 32 MB
	if r.Form == nil {
		r.ParseMultipartForm(defaultMaxMemory)
	}
	return r.Form
}

func (argv *{{$type}}) Parse(r *http.Request) error {
	var err error
	{{range $field := $bean.Fields}}
		{{- $key := newString}}
		{{- $tmp := newString}}
		{{- $dft := newString}}
		{{- $tag := $field.GetTag "form"}}
		{{- if eq $tag ""}}
			{{- $key.Set (underScore $field.Name)}}
		{{- else}}
			{{- $key.Set $tag}}
		{{- end}}
		{{- $dft.Set ($field.GetTag "dft")}}
		{{- $fieldType := context.BuildType $field.Type -}}
		{{- if eq "true" ($field.GetTag "required")}}
			argv.{{upperCamel $field.Name}}, err = query.Required{{title $fieldType}}(argv.form(r), "{{$key.Get}}")
		{{- else}}
			{{- if eq "string" $fieldType}}
				argv.{{upperCamel $field.Name}} = query.{{title $fieldType}}(argv.form(r), "{{$key.Get}}", "{{$dft.Get}}")
			{{- else if eq "bool" $fieldType}}
				{{- if eq "" $dft.Get}}{{$dft.Set "false"}}{{- end}}
				argv.{{upperCamel $field.Name}}, err = query.{{title $fieldType}}(argv.form(r), "{{$key.Get}}", {{$dft.Get}})
			{{- else}}
				{{- if eq "" $dft.Get}}{{$dft.Set "0"}}{{- end}}
				argv.{{upperCamel $field.Name}}, err = query.{{title $fieldType}}(argv.form(r), "{{$key.Get}}", {{$dft.Get}})
			{{- end}}
		{{- end}}
		if err != nil {
			return err
		}
	{{end}}
	return err
}
{{end}}
{{end}}

{{.GenerateDeclsBySubTemplates}}
